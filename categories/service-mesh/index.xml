<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service Mesh on Jimmy Song</title>
    <link>https://jimmysong.io/categories/service-mesh/</link>
    <description>Recent content in Service Mesh on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 11 Sep 2018 10:39:42 +0800</lastBuildDate>
    
	<atom:link href="https://jimmysong.io/categories/service-mesh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持</title>
      <link>https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/</link>
      <pubDate>Tue, 11 Sep 2018 10:39:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/</guid>
      <description>理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持 以往有很多文章讲解 Istio 是如何做 Sidecar 注入的，但是没有讲解注入之后 Sidecar 工作的细节。本文将带大家详细了解 Istio 是如何将 Envoy 作</description>
    </item>
    
    <item>
      <title>企业级服务网格架构之路解读</title>
      <link>https://jimmysong.io/posts/the-enterprise-path-to-service-mesh-architectures/</link>
      <pubDate>Fri, 17 Aug 2018 18:05:08 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/the-enterprise-path-to-service-mesh-architectures/</guid>
      <description>追本溯源，Service Mesh实际上是一种SDN，等同于OSI模型中的会话层。 每一次技术变革，必然要导致生产力和生产关系的变革，我们看到这</description>
    </item>
    
    <item>
      <title>Istio 1.0发布，生态逐步壮大，且可用于生产！</title>
      <link>https://jimmysong.io/posts/istio-1.0-released/</link>
      <pubDate>Wed, 01 Aug 2018 14:42:36 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/istio-1.0-released/</guid>
      <description>今天，我们很高兴地宣布 Istio 1.0。这距离最初的 0.1 版本发布以来已经过了一年多时间了。从 0.1 起，Istio 就在蓬勃发展的社区、贡献者和用户的帮助下迅</description>
    </item>
    
    <item>
      <title>SOFAMesh &amp; SOFA MOSN—基于Istio构建的用于应对大规模流量的Service Mesh解决方案</title>
      <link>https://jimmysong.io/posts/sofamesh-and-mosn-proxy-sidecar-service-mesh-by-ant-financial/</link>
      <pubDate>Mon, 16 Jul 2018 17:48:18 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/sofamesh-and-mosn-proxy-sidecar-service-mesh-by-ant-financial/</guid>
      <description>4月，蚂蚁金服自主研发的分布式中间件（Scalable Open Financial Architecture，以下简称 SOFA ）启动开源计划，并开放多个组件，（相关背景请点</description>
    </item>
    
    <item>
      <title>Introducing SOFAMesh - A Solution for Large Scale Service Mesh based on Istio</title>
      <link>https://jimmysong.io/posts/introducing-sofamesh-a-solution-for-large-scale-service-mesh-by-ant-financial/</link>
      <pubDate>Mon, 16 Jul 2018 12:02:17 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/introducing-sofamesh-a-solution-for-large-scale-service-mesh-by-ant-financial/</guid>
      <description>SOFAMesh is a solution for large-scale Service Mesh based on Istio open-sourced by Ant Financial. At the same time it is also a part of SOFA(Scalable Open Financial Architecture) which is open sourced by Ant Financial too. On the basis of inheriting the powerful functions and rich features of Istio, in order to meet the performance requirements under large-scale deployment and to deal with the actual situation in the practice, the following improvements have been made:</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup杭州站回顾</title>
      <link>https://jimmysong.io/posts/hangzhou-service-mesh-meetup/</link>
      <pubDate>Mon, 02 Jul 2018 12:01:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/hangzhou-service-mesh-meetup/</guid>
      <description>6月30日，杭州，蚂蚁Z空间，一大早就下起了雨，我还心想，这雨要是下大了会不会很多人不来了？而且我们还一早就放出了IT大咖说的直播链接。没想</description>
    </item>
    
    <item>
      <title>Vistio—使用Netflix的Vizceral可视化Istio service mesh</title>
      <link>https://jimmysong.io/posts/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/</link>
      <pubDate>Thu, 21 Jun 2018 12:21:36 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/</guid>
      <description>Vistio GitHub地址：https://github.com/nmnellis/vistio Vizceral是Netflix发布的一个开源项目，</description>
    </item>
    
    <item>
      <title>Envoy最新官方文档中文版发布——由ServiceMesher社区倾情奉献</title>
      <link>https://jimmysong.io/posts/envoyproxy-docs-cn-1.7-release/</link>
      <pubDate>Wed, 30 May 2018 11:50:55 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoyproxy-docs-cn-1.7-release/</guid>
      <description>Envoy ——为云原生应用而设计、开源的边缘和服务代理、Istio Service Mesh 默认的数据平面，最新官方文档中文版，由 ServiceMesher社区倾情奉献，</description>
    </item>
    
    <item>
      <title>Envoy 最新官方文档翻译工作启动 - ServiceMesher 组织倾力打造</title>
      <link>https://jimmysong.io/posts/servicemesher-community/</link>
      <pubDate>Wed, 16 May 2018 14:47:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/servicemesher-community/</guid>
      <description>Envoy 是一款由 Lyft 开源的，使用 C++ 编写的 L7 代理和通信总线，目前是 CNCF 旗下的开源项目，代码托管在 GitHub 上，它也是 Istio service mesh 中默认的 data plane。我们发现它有很好</description>
    </item>
    
    <item>
      <title>在 Kubernetes 中使用 Envoy mesh 教程</title>
      <link>https://jimmysong.io/posts/envoy-mesh-in-kubernetes-tutorial/</link>
      <pubDate>Sat, 28 Apr 2018 20:26:53 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-mesh-in-kubernetes-tutorial/</guid>
      <description>本文是在 Kubernetes 集群中，使用 Envoy 来做 mesh，来为一个简单的使用 Python 编写的 Flask 应用程序做反向代理和负载均衡。 注：本教程中的示例来自 envoy-steps</description>
    </item>
    
    <item>
      <title>Envoy 的架构与基本术语</title>
      <link>https://jimmysong.io/posts/envoy-archiecture-and-terminology/</link>
      <pubDate>Fri, 27 Apr 2018 17:16:50 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-archiecture-and-terminology/</guid>
      <description>在了解一门技术之前一开始就要了解其中的基本概念和术语，只有融入了该语境才能理解这门技术。本文将为大家介绍 Envoy 中的基本术语和重点概念。 架构 下图是</description>
    </item>
    
    <item>
      <title>使用 Envoy 作为前端代理</title>
      <link>https://jimmysong.io/posts/envoy-as-front-proxy/</link>
      <pubDate>Sun, 22 Apr 2018 17:13:15 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-as-front-proxy/</guid>
      <description>Envoy 是一款由 Lyft 开源的，使用 C++ 编写的 L7 代理和通信总线，目前是 CNCF 旗下的开源项目，代码托管在 GitHub 上，它也是 Istio service mesh 中默认的 data plane。本文将给出使用 Envoy</description>
    </item>
    
    <item>
      <title>Istio Service Mesh 教程</title>
      <link>https://jimmysong.io/posts/istio-tutorial/</link>
      <pubDate>Wed, 18 Apr 2018 23:20:47 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/istio-tutorial/</guid>
      <description>本文是 Istio 管理 Java 微服务的案例教程，使用的所有工具和软件全部基于开源方案，替换了 redhat-developer-demos/istio-tutorial 中的 minishift 环境，使用 kubernetes-vagrant-centos-cluster 替代，沿用了原有的微服务示例，使用 Zipkin 做分布式</description>
    </item>
    
    <item>
      <title>Istio 社区介绍与社区参与注意事项</title>
      <link>https://jimmysong.io/posts/istio-community-tips/</link>
      <pubDate>Sat, 14 Apr 2018 18:34:40 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/istio-community-tips/</guid>
      <description>本文讲述了参与 Istio 社区和进行 Istio 开发时需要注意的事项。 工作组 绝大多数复杂的开源项目都是以工作组的方式组织的，要想为 Istio 社区做贡献可以加入到以下的工</description>
    </item>
    
    <item>
      <title>Istio中sidecar的注入及示例</title>
      <link>https://jimmysong.io/posts/istio-sidecar-injection-in-kubernetes/</link>
      <pubDate>Tue, 27 Mar 2018 19:58:48 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/istio-sidecar-injection-in-kubernetes/</guid>
      <description>我们知道 Istio 通过向 Pod 中注入一个 sidecar 容器来将 Pod 纳入到 Istio service mesh 中的，那么这些 sidecar 容器的注入遵循什么样的规范，需要给每个 Pod 增加哪些配置信息才能纳入 Istio service mesh 中</description>
    </item>
    
    <item>
      <title>为什么我们需要Istio？</title>
      <link>https://jimmysong.io/posts/why-do-we-need-istio/</link>
      <pubDate>Mon, 19 Mar 2018 23:43:33 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/why-do-we-need-istio/</guid>
      <description>本文译自Istio Why do I need it? 译者Jimmy Song 我最近没有多少时间去玩k8s，并承认Istio到底给k8s带来了什么方面有点迷失了。这是否会增加</description>
    </item>
    
  </channel>
</rss>