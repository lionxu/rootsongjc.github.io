<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Envoy on Jimmy Song</title>
    <link>https://jimmysong.io/tags/envoy/</link>
    <description>Recent content in Envoy on Jimmy Song</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 26 Dec 2018 18:32:27 +0800</lastBuildDate>
    
	<atom:link href="https://jimmysong.io/tags/envoy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解 Istio Service Mesh 中 Envoy Sidecar 代理的路由转发</title>
      <link>https://jimmysong.io/posts/enovy-sidecar-routing-in-istio-service-mesh-deep-dive/</link>
      <pubDate>Wed, 26 Dec 2018 18:32:27 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/enovy-sidecar-routing-in-istio-service-mesh-deep-dive/</guid>
      <description>本文以 Istio 官方的 bookinfo 示例来讲解在进入 Pod 的流量被 iptables 转交给 Envoy sidecar 后，Envoy 是如何做路由转发的，详述了 Inbound 和 Outbound 处理过程。关于流量拦截的详细分析请参考理</description>
    </item>
    
    <item>
      <title>理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持</title>
      <link>https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/</link>
      <pubDate>Tue, 11 Sep 2018 10:39:42 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/</guid>
      <description>以往有很多文章讲解 Istio 是如何做 Sidecar 注入的，但是没有讲解注入之后 Sidecar 工作的细节。本文将带大家详细了解 Istio 是如何将 Envoy 作为 Sidecar 的方式注入到应用程序 Pod 中，及 Sidecar</description>
    </item>
    
    <item>
      <title>Envoy最新官方文档中文版发布——由ServiceMesher社区倾情奉献</title>
      <link>https://jimmysong.io/posts/envoyproxy-docs-cn-1.7-release/</link>
      <pubDate>Wed, 30 May 2018 11:50:55 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoyproxy-docs-cn-1.7-release/</guid>
      <description>Envoy ——为云原生应用而设计、开源的边缘和服务代理、Istio Service Mesh 默认的数据平面，最新官方文档中文版，由 ServiceMesher社区倾情奉献，</description>
    </item>
    
    <item>
      <title>Envoy 最新官方文档翻译工作启动 - ServiceMesher 组织倾力打造</title>
      <link>https://jimmysong.io/posts/servicemesher-community/</link>
      <pubDate>Wed, 16 May 2018 14:47:19 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/servicemesher-community/</guid>
      <description>Envoy 是一款由 Lyft 开源的，使用 C++ 编写的 L7 代理和通信总线，目前是 CNCF 旗下的开源项目，代码托管在 GitHub 上，它也是 Istio service mesh 中默认的 data plane。我们发现它有很好</description>
    </item>
    
    <item>
      <title>在 Kubernetes 中使用 Envoy mesh 教程</title>
      <link>https://jimmysong.io/posts/envoy-mesh-in-kubernetes-tutorial/</link>
      <pubDate>Sat, 28 Apr 2018 20:26:53 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-mesh-in-kubernetes-tutorial/</guid>
      <description>本文是在 Kubernetes 集群中，使用 Envoy 来做 mesh，来为一个简单的使用 Python 编写的 Flask 应用程序做反向代理和负载均衡。 注：本教程中的示例来自 envoy-steps</description>
    </item>
    
    <item>
      <title>Envoy 的架构与基本术语</title>
      <link>https://jimmysong.io/posts/envoy-archiecture-and-terminology/</link>
      <pubDate>Fri, 27 Apr 2018 17:16:50 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-archiecture-and-terminology/</guid>
      <description>在了解一门技术之前一开始就要了解其中的基本概念和术语，只有融入了该语境才能理解这门技术。本文将为大家介绍 Envoy 中的基本术语和重点概念。 架构 下图是</description>
    </item>
    
    <item>
      <title>使用 Envoy 作为前端代理</title>
      <link>https://jimmysong.io/posts/envoy-as-front-proxy/</link>
      <pubDate>Sun, 22 Apr 2018 17:13:15 +0800</pubDate>
      
      <guid>https://jimmysong.io/posts/envoy-as-front-proxy/</guid>
      <description>Envoy 是一款由 Lyft 开源的，使用 C++ 编写的 L7 代理和通信总线，目前是 CNCF 旗下的开源项目，代码托管在 GitHub 上，它也是 Istio service mesh 中默认的 data plane。本文将给出使用 Envoy</description>
    </item>
    
  </channel>
</rss>